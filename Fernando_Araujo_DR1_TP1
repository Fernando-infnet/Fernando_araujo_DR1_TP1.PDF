{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f-P7x8qbWQzG"
      },
      "outputs": [],
      "source": [
        "📝 Exercícios – Parte 1\n",
        "Teste Exploratório: Avaliação Geral\n",
        "\n",
        "📌 Competência: ✔ Realizar testes exploratórios avaliando funcionalidade e usabilidade.\n",
        "📋 Tarefas:\n",
        "Execute o programa testando vários cenários diferentes.\n",
        "Insira valores normais, extremos e inválidos.\n",
        "Avalie se o programa responde corretamente.\n",
        "Observe a experiência do usuário: as instruções são claras? A interação é intuitiva?\n",
        "Identificação de Problemas\n",
        "\n",
        "📌 Competência: ✔ Identificar problemas a partir de testes exploratórios.\n",
        "📋 Tarefas:\n",
        "Liste os erros encontrados durante os testes.\n",
        "Classifique os problemas identificados:\n",
        "Erros funcionais (cálculo incorreto, falhas no código).\n",
        "Problemas de usabilidade (interface confusa, mensagens mal formuladas).\n",
        "Indique a prioridade de correção para cada problema.\n",
        "Especificação do Comportamento Esperado\n",
        "\n",
        "📌 Competência: ✔ Escrever especificações claras detalhando o comportamento esperado do software.\n",
        "📋 Tarefas:\n",
        "Descreva como o programa deveria funcionar corretamente.\n",
        "Defina as regras de entrada e saída para peso e altura.\n",
        "Especifique como os erros devem ser tratados (ex.: mensagens de erro claras).\n",
        "Partições Equivalentes para Entrada de Dados\n",
        "\n",
        "📌 Competência: ✔ Criar casos de teste utilizando partições equivalentes.\n",
        "📋 Tarefas:\n",
        "Identifique três categorias de entrada para peso e altura:\n",
        "Válidas (ex.: 70 kg, 1.75 m).\n",
        "Inválidas (ex.: -10 kg, letras, caracteres especiais).\n",
        "Limítrofes (ex.: 0 kg, 0.5 m).\n",
        "Escreva casos de teste para cada categoria.\n",
        "Análise de Limites\n",
        "\n",
        "📌 Competência: ✔ Criar casos de teste utilizando análise de limites.\n",
        "📋 Tarefas:\n",
        "Identifique valores no limite inferior e superior para peso e altura.\n",
        "Teste valores críticos (ex.: 0 kg, 500 kg, 0.5 m, 3.5 m).\n",
        "Avalie como o programa se comporta nesses casos.\n",
        "Cobertura de Código com JaCoCo\n",
        "\n",
        "📌 Competência: ✔ Avaliar a cobertura de código para identificar áreas não testadas.\n",
        "📋 Tarefas:\n",
        "Instale e configure o JaCoCo para medir a cobertura dos testes.\n",
        "Identifique quais partes do código não estão sendo testadas.\n",
        "Sugira novos casos de teste para aumentar a cobertura."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Esse código utilizando parâmetros ideais, com numeros formatados para o código (utilizando ponto ao invés de vírgula para números), números positivos, não nulos, acima de zero. Faz com que a execução seja prazerosa e positiva, porém, quando não é seguido os parâmetros do código ocorre uma saída da execução abrupta, sem indicação de erro intuitiva ou clara.\n",
        "\n",
        "**Problemas do código:**\n",
        "\n",
        "- Valores negativos são permitidos\n",
        "- Valores de 0 como resultado são disponíveis\n",
        "- Entradas inválidads não são tratadas e só impede a execução do código sem tratamento de erro claro\n",
        "\n",
        "**Funcionalidade esperada:**\n",
        "\n",
        "Inserção de valores de altura e peso, cálculo de imc, classificação do resultado entre as categorias pré estabelecidas do número gerado pelo cálculo. Tratamento de erros, dados inválidos tem que ser tratados e ser necessário formatação do input pelo usuário após aviso de motivo pelo erro ocorrido.\n",
        "\n",
        "**Categorias de Entrada**\n",
        "\n",
        "Válidas:\n",
        "\n",
        "Peso = 70 kg, Altura = 1.75 m → IMC ≈ 22.86, \"Saudável\".\n",
        "Peso = 85.5 kg, Altura = 1.60 m → IMC ≈ 33.39, \"Obesidade Grau I\".\n",
        "\n",
        "\n",
        "Inválidas:\n",
        "\n",
        "Peso = -10 kg, Altura = 1.8 m → Erro: \"Peso deve ser positivo.\"\n",
        "Peso = 70 kg, Altura = 0 m → Erro: \"Altura deve ser positiva.\"\n",
        "Peso = \"abc\", Altura = 1.8 m → Erro: \"Insira um número válido.\"\n",
        "\n",
        "\n",
        "Limítrofes:\n",
        "\n",
        "Peso = 0.1 kg, Altura = 1.8 m → IMC ≈ 0.03, \"Magreza grave\".\n",
        "Peso = 200 kg, Altura = 2.5 m → IMC ≈ 32.00, \"Obesidade Grau I\".\n",
        "\n",
        "**Partições Equivalentes para Entrada de Dados**\n",
        "\n",
        "Peso = 0 kg, Altura = 1.8 m → Esperado: Erro \"Peso deve ser positivo.\" (Atual: IMC inválido).\n",
        "\n",
        "Peso = 0.1 kg, Altura = 1.8 m → Esperado: IMC ≈ 0.03, \"Magreza grave.\" (Atual: Funciona).\n",
        "\n",
        "Peso = 500 kg, Altura = 1.8 m → Esperado: IMC ≈ 154.32, \"Obesidade Grau III.\" (Atual: Funciona).\n",
        "\n",
        "Altura = 0 m, Peso = 70 kg → Esperado: Erro \"Altura deve ser positiva.\" (Atual: ArithmeticException).\n",
        "\n",
        "Altura = 0.5 m, Peso = 70 kg → Esperado: IMC ≈ 280.00, \"Obesidade Grau III.\" (Atual: Funciona).\n",
        "\n",
        "Altura = 3.5 m, Peso = 70 kg → Esperado: IMC ≈ 5.71, \"Magreza grave.\" (Atual: Funciona).\n",
        "\n",
        "**Cobertura de Código com JaCoCo**\n",
        "\n",
        "public class CalculoIMCTest {\n",
        "    @Test\n",
        "    public void testCalcularPeso() {\n",
        "        assertEquals(22.86, CalculoIMC.calcularPeso(70.0, 1.75), 0.01);\n",
        "    }\n",
        "\n",
        "    @Test\n",
        "    public void testClassificarIMCSaudavel() {\n",
        "        assertEquals(\"Saudável\", CalculoIMC.classificarIMC(22.86));\n",
        "    }\n",
        "\n",
        "    @Test\n",
        "    public void testClassificarIMCMagrezaGrave() {\n",
        "        assertEquals(\"Magreza grave\", CalculoIMC.classificarIMC(15.0));\n",
        "    }\n",
        "\n",
        "    //Teste de validação de input\n",
        "\n",
        "    @Test\n",
        "    public void testProgramaIMCValido() {\n",
        "        String resultado = CalculoIMC.programaIMC(\"1.0\", \"70\", \"1.75\");\n",
        "        assertEquals(\"Seu índice de massa corporal é: 22.86 kg/m²\\nClassificação: Saudável.\", resultado);\n",
        "    }\n",
        "\n",
        "    @Test\n",
        "    public void testProgramaIMCInvalido() {\n",
        "        String resultado = CalculoIMC.programaIMC(\"1.0\", \"abc\", \"1.75\");\n",
        "        assertEquals(\"Erro: Insira um número válido.\", resultado);\n",
        "    }\n",
        "\n",
        "    @Test\n",
        "    public void testProgramaIMCPesoNegativo() {\n",
        "        String resultado = CalculoIMC.programaIMC(\"1.0\", \"-10\", \"1.75\");\n",
        "        assertEquals(\"Erro: Peso deve ser positivo.\", resultado);\n",
        "    }\n",
        "}"
      ],
      "metadata": {
        "id": "57VOgnLgWwcM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exercícios – Parte 2\n",
        "\n",
        "**Explicação do Conceito de Testes Baseados em Propriedades**\n",
        "\n",
        "📌 Competência: ✔ Explicar o conceito de testes baseados em propriedades e suas vantagens.\n",
        "📋 Tarefas:\n",
        "Explique como os testes baseados em propriedades diferem dos testes tradicionais.\n",
        "Liste vantagens dessa abordagem, incluindo:\n",
        "Geração automática de dados.\n",
        "Identificação de casos inesperados.\n",
        "Maior cobertura com menos código.\n",
        "Dê um exemplo prático de uma propriedade que pode ser testada no cálculo de IMC.\n",
        "\n",
        "**Explicação**\n",
        "Os testes baseados em propriedade funcionam diferente dos testes manuais, estes últimos vem da mente do desenvolvedor em uma execução não padronizada, estratégia e objetivo não necessáriamente estabelecido. Já os testes baseados em prioridades, você define regras que não podem mudar, (x + y) > 2, por exemplo, é impossível dois valores que não sejam acima de dois, com esses dados estabelecidos, uma das vantagens é que as ferramentas de teste de propriedade fazem milhares de teste testando a condição pré-estabelecida, essa grande quantidade de teste aumente o escopo da procura por erros, que podem aparecer por uitilizar parâmetros não necessáriamente pensados como exceção anteriormente. A cobertura maior com menos código ocorre por causa das massivas quantidades de testes podem ser executados utilizando esse método ao invés da própria cabeça e trabalho manual.\n",
        "\n",
        "**Criando Testes Baseados em Propriedades com Jqwik**\n",
        "\n",
        "📌 Competência: ✔ Criar testes com Jqwik a partir da configuração de propriedades e geradores de dados.\n",
        "📋 Tarefas:\n",
        "Implemente um teste de propriedade para garantir que o IMC nunca seja negativo.\n",
        "Use o Jqwik para gerar valores aleatórios para peso e altura.\n",
        "💡 Exemplo de Código:\n",
        "import net.jqwik.api.*;\n",
        "import static org.assertj.core.api.Assertions.assertThat;\n",
        "\n",
        "class IMCTest {\n",
        "\n",
        "    @Property\n",
        "    void imcNuncaDeveSerNegativo(@ForAll @Positive double peso, @ForAll @Positive double altura) {\n",
        "        double imc = peso / (altura * altura);\n",
        "        assertThat(imc).isGreaterThanOrEqualTo(0);\n",
        "    }\n",
        "}\n",
        "\n",
        "**Explicação**\n",
        "\n",
        "class CalculoIMCTest {\n",
        "\n",
        "    @Property\n",
        "    void imcNuncaDeveSerNegativo(@ForAll @Positive double peso, @ForAll @Positive double altura) {\n",
        "        double imc = CalculoIMC.calcularPeso(peso, altura);\n",
        "        assertThat(imc).isGreaterThanOrEqualTo(0.0);\n",
        "    }\n",
        "}\n",
        "\n",
        "**Gerando Conjuntos Diversificados de Dados**\n",
        "\n",
        "📌 Competência: ✔ Criar testes com Jqwik utilizando geradores personalizados de dados.\n",
        "📋 Tarefas:\n",
        "Configure geradores personalizados para testar valores extremos e improváveis (ex.: altura de 0.1m, peso de 400kg).\n",
        "Escreva pelo menos um teste para validar o comportamento do IMC em casos fora do comum.\n",
        "💡 Exemplo de Código:\n",
        "class CustomGenerators {\n",
        "    @Provide\n",
        "    Arbitrary<Double> alturasExtremas() {\n",
        "        return Arbitraries.of(0.5, 3.0, 5.0);  // Valores incomuns de altura\n",
        "    }\n",
        "}\n",
        "\n",
        "**Explicação**\n",
        "\n",
        "class CalculoIMCTest {\n",
        "\n",
        "    @Provide\n",
        "    Arbitrary<Double> alturasExtremas() {\n",
        "        return Arbitraries.oneOf(\n",
        "            Arbitraries.doubles().between(0.1, 0.5),  \n",
        "            (improváveis)\n",
        "            Arbitraries.doubles().between(2.5, 5.0)\n",
        "            (improváveis)\n",
        "        );\n",
        "    }\n",
        "\n",
        "    @Property\n",
        "    void imcEmCasosExtremos(@ForAll @Positive double peso, @ForAll(\"alturasExtremas\") double altura) {\n",
        "        double imc = CalculoIMC.calcularPeso(peso, altura);\n",
        "        assertThat(imc).isGreaterThanOrEqualTo(0.0).isFinite();  \n",
        "}\n",
        "\n",
        "**Analisando Contraprovações Geradas pelo Jqwik**\n",
        "\n",
        "📌 Competência: ✔ Analisar resultados de testes com Jqwik para identificar falhas e interpretar contraprovações geradas.\n",
        "📋 Tarefas:\n",
        "Execute um teste de propriedades sem restrições de entrada.\n",
        "Analise os casos de falha gerados automaticamente pelo Jqwik.\n",
        "Documente o menor contraexemplo encontrado e explique por que ele falhou.\n",
        "💡 Exemplo de Código (Teste sem restrições):\n",
        "@Property\n",
        "void testIMCComValoresAleatorios(@ForAll double peso, @ForAll double altura) {\n",
        "    double imc = peso / (altura * altura);\n",
        "    assertThat(imc).isGreaterThanOrEqualTo(0);\n",
        "}\n",
        "Caso Jqwik gere um contraexemplo (ex.: altura = 0), explique o impacto desse erro no programa.\n",
        "\n",
        "**Explicação**\n",
        "\n",
        "[ERROR] Failures:\n",
        "[ERROR]   CalculoIMCTest.testIMCComValoresAleatorios:9\n",
        "Expecting actual:\n",
        "  NaN\n",
        "to be greater than or equal to:\n",
        "  0.0\n",
        "\n",
        "[INFO]\n",
        "[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0\n",
        "\n",
        "Esse erro causa uma exceção em runtime (ArithmeticException para /0 em alguns contextos, mas em doubles é Infinity/NaN). No programa, isso imprimiria \"Seu índice de massa corporal é: Infinity kg/m²\" ou \"NaN\", e a classificação falharia (ex.: para Infinity, cairia em \"Obesidade Grau III\")\n",
        "\n",
        "**Isolando Dependências com Mocks**\n",
        "\n",
        "📌 Competência: ✔ Isolar a classe sob teste substituindo suas dependências por objetos simulados.\n",
        "📋 Tarefas:\n",
        "Identifique quais partes do código dependem de fontes externas (ex.: banco de dados, API).\n",
        "Utilize Mockito para criar um mock dessas dependências.\n",
        "Escreva um teste unitário isolado, sem acessar fontes externas.\n",
        "💡 Exemplo de Código (Mockito):\n",
        "import static org.mockito.Mockito.*;\n",
        "\n",
        "class IMCServiceTest {\n",
        "\n",
        "    @Test\n",
        "    void testCalculoIMCComMock() {\n",
        "        IMCService imcService = mock(IMCService.class);\n",
        "        when(imcService.calcularIMC(80, 1.80)).thenReturn(24.69);\n",
        "\n",
        "        double imc = imcService.calcularIMC(80, 1.80);\n",
        "        assertThat(imc).isEqualTo(24.69);\n",
        "    }\n",
        "}\n",
        "\n",
        "**Explicação**\n",
        "\n",
        "A dependência externa é a entrada do usuário via Scanner, para isolar, podemos mockar o Scanner para simular inputs sem interação real, testando apenas a lógica de cálculo e classificação.\n",
        "\n",
        "\n",
        "class CalculoIMCTest {\n",
        "\n",
        "    @Test\n",
        "    void testProgramaIMCComMocks() {\n",
        "        // Mockar Scanners\n",
        "        Scanner pScanMock = Mockito.mock(Scanner.class);\n",
        "        Scanner aScanMock = Mockito.mock(Scanner.class);\n",
        "\n",
        "        // Simular inputs\n",
        "        when(pScanMock.nextLine()).thenReturn(\"70.0\");\n",
        "        when(aScanMock.nextLine()).thenReturn(\"1.75\");\n",
        "\n",
        "        // MockedStatic para System.out\n",
        "        double imc = CalculoIMC.calcularPeso(70.0, 1.75);\n",
        "        String classificacao = CalculoIMC.classificarIMC(imc);\n",
        "\n",
        "        assertThat(imc).isCloseTo(22.857, org.assertj.core.api.Assertions.offset(0.001));\n",
        "        assertThat(classificacao).isEqualTo(\"Saudável\");\n",
        "    }\n",
        "}\n",
        "\n",
        "\n",
        "** Criando Testes Baseados em Propriedades para Valores Específicos **\n",
        "\n",
        "📌 Competência: ✔ Criar testes com Jqwik para validar comportamentos específicos do cálculo de IMC.\n",
        "📋 Tarefas:\n",
        "Defina novas propriedades que o IMC deve respeitar.\n",
        "Teste valores específicos usando o @Example do Jqwik.\n",
        "💡 Exemplo de Código:\n",
        "@Property\n",
        "void testIMCComCasosEspecíficos(@Example double peso, @Example double altura) {\n",
        "    double imc = peso / (altura * altura);\n",
        "    assertThat(imc).isBetween(10.0, 50.0);\n",
        "}\n",
        "Inclua explicações sobre por que esses valores foram escolhidos.\n",
        "\n",
        "**Explicação**\n",
        "\n",
        "class CalculoIMCTest {\n",
        "\n",
        "    @Example\n",
        "    void testIMCComBordaSaudavel() {\n",
        "        double peso = 56.2275;  // Calculado para dar exatamente IMC=18.5 com altura=1.74\n",
        "        double altura = 1.74;\n",
        "        double imc = CalculoIMC.calcularPeso(peso, altura);\n",
        "        assertThat(imc).isBetween(5.0, 100.0);\n",
        "        assertThat(CalculoIMC.classificarIMC(imc)).isEqualTo(\"Saudável\");\n",
        "    }\n",
        "\n",
        "    @Example\n",
        "    void testIMCComBordaObesidadeIII() {\n",
        "        double peso = 160.0;  // Calculado para dar exatamente IMC=40.0 com altura=2.0\n",
        "        double altura = 2.0;\n",
        "        double imc = CalculoIMC.calcularPeso(peso, altura);\n",
        "        assertThat(imc).isBetween(5.0, 100.0);\n",
        "        assertThat(CalculoIMC.classificarIMC(imc)).isEqualTo(\"Obesidade Grau III\");\n",
        "    }\n",
        "}"
      ],
      "metadata": {
        "id": "61OI9X9imZWa"
      }
    }
  ]
}